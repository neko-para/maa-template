diff --git a/.vscode/extensions.json b/.vscode/extensions.json
index 822f338..020dee4 100644
--- a/.vscode/extensions.json
+++ b/.vscode/extensions.json
@@ -1,6 +1,7 @@
 {
     "recommendations": [
         "nekosu.maa-support",
-        "davidanson.vscode-markdownlint"
+        "davidanson.vscode-markdownlint",
+        "ms-python.black-formatter"
     ]
 }
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 2c5e125..bba0394 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -27,5 +27,8 @@
         "editor.insertSpaces": true,
         "editor.tabSize": 4,
         "editor.indentSize": "tabSize"
+    },
+    "[python]": {
+        "editor.defaultFormatter": "ms-python.black-formatter"
     }
 }
diff --git a/agent/main.py b/agent/main.py
new file mode 100644
index 0000000..7a69fb2
--- /dev/null
+++ b/agent/main.py
@@ -0,0 +1,21 @@
+import sys
+
+from maa.agent.agent_server import AgentServer
+from maa.toolkit import Toolkit
+
+import my_action
+import my_reco
+
+
+def main():
+    Toolkit.init_option("./")
+
+    socket_id = sys.argv[-1]
+
+    AgentServer.start_up(socket_id)
+    AgentServer.join()
+    AgentServer.shut_down()
+
+
+if __name__ == "__main__":
+    main()
diff --git a/agent/my_action.py b/agent/my_action.py
new file mode 100644
index 0000000..0ad2234
--- /dev/null
+++ b/agent/my_action.py
@@ -0,0 +1,17 @@
+from maa.agent.agent_server import AgentServer
+from maa.custom_action import CustomAction
+from maa.context import Context
+
+
+@AgentServer.custom_action("my_action_111")
+class MyCustomAction(CustomAction):
+
+    def run(
+        self,
+        context: Context,
+        argv: CustomAction.RunArg,
+    ) -> bool:
+
+        print("my_action_111 is running!")
+
+        return True
diff --git a/agent/my_reco.py b/agent/my_reco.py
new file mode 100644
index 0000000..63e6fe5
--- /dev/null
+++ b/agent/my_reco.py
@@ -0,0 +1,37 @@
+from maa.agent.agent_server import AgentServer
+from maa.custom_recognition import CustomRecognition
+from maa.context import Context
+
+
+@AgentServer.custom_recognition("my_reco_222")
+class MyRecongition(CustomRecognition):
+
+    def analyze(
+        self,
+        context: Context,
+        argv: CustomRecognition.AnalyzeArg,
+    ) -> CustomRecognition.AnalyzeResult:
+
+        reco_detail = context.run_recognition(
+            "MyCustomOCR",
+            argv.image,
+            pipeline_override={"MyCustomOCR": {"roi": [100, 100, 200, 300]}},
+        )
+
+        # context is a reference, will override the pipeline for whole task
+        context.override_pipeline({"MyCustomOCR": {"roi": [1, 1, 114, 514]}})
+        # context.run_recognition ...
+
+        # make a new context to override the pipeline, only for itself
+        new_context = context.clone()
+        new_context.override_pipeline({"MyCustomOCR": {"roi": [100, 200, 300, 400]}})
+        reco_detail = new_context.run_recognition("MyCustomOCR", argv.image)
+
+        click_job = context.tasker.controller.post_click(10, 20)
+        click_job.wait()
+
+        context.override_next(argv.node_name, ["TaskA", "TaskB"])
+
+        return CustomRecognition.AnalyzeResult(
+            box=(0, 0, 100, 100), detail="Hello World!"
+        )
diff --git a/assets/interface.json b/assets/interface.json
index 30e1352..5b7f27b 100644
--- a/assets/interface.json
+++ b/assets/interface.json
@@ -47,6 +47,10 @@
                 "任务选项1"
             ],
             "pipeline_override": {}
+        },
+        {
+            "name": "带Custom的任务",
+            "entry": "MyTask4"
         }
     ],
     "option": {
@@ -70,5 +74,9 @@
                 }
             ]
         }
+    },
+    "agent": {
+        "child_exec": "python",
+        "child_args": ["{PROJECT_DIR}/agent/main.py"]
     }
 }
diff --git a/assets/resource/pipeline/task.json b/assets/resource/pipeline/task.json
index 84ff39a..0529c8f 100644
--- a/assets/resource/pipeline/task.json
+++ b/assets/resource/pipeline/task.json
@@ -1,5 +1,11 @@
 {
     "MyTask1": {},
     "MyTask2": {},
-    "MyTask3": {}
+    "MyTask3": {},
+    "MyTask4": {
+        "recognition": "Custom",
+        "custom_recognition": "my_reco_222",
+        "action": "Custom",
+        "custom_action": "my_action_111"
+    }
 }
